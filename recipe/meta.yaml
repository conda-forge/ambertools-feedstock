{% set name = "AmberTools" %}
# Versioning scheme uses AmberTools major release as MAJOR version number, patch level as MINOR version number
# Update the MINOR version number as new patch releases come out
{% set version = "24.8" %}
# use run or skip
{% set unit_tests = "skip" %}
{% set build = 0 %}
{% set build = build + 100 %}  # [mpi == 'nompi' and cuda_compiler_version == "None"]

{% if cuda_compiler_version != "None" %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
{% else %}
{% set cuda_major = 0 %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://ambermd.org/downloads/AmberTools24_rc5.tar.bz2
  sha256: 52fb4fb3370a89b7ce738a2dc3e513c2fc1943fde4b4381846d9e75cc48d840f
  patches:
    - patches/do_not_symlink_missing_ff12pol.patch
    - patches/do_not_install_vendored_parmed.patch
    #- patches/remove_mtune_native_for_m1.patch  # [arm64]
    #- patches/replace_mtune_with_mcpu.patch  # [arm64]
    #- patches/remove_nab2c_and_friends.patch  # [arm64]
    - patches/add_arm64_arch.patch  # [arm64]
    - patches/dont_muck_with_CXX_and_CC_envars.patch  # [arm64]
    - patches/0001-do-not-clean-compiler-flags.patch
    - patches/cythonize-py313.patch  # [py == 313]
    #- patches/0001-use-find_package-CUDAToolkit-instead-of-find_package.patch
    #- patches/0002-rely-on-DCMAKE_CUDA_ARCHITECTURES.patch
    #- patches/0003-look-in-right-place-for-libcudadevrt.a.patch
    #- patches/0004-adapt-CMake-function-calls-that-were-due-to-find_pac.patch
    #- patches/0005-set-enable_language-CUDA-in-a-bunch-of-places.patch

build:
  number: {{ build }}
  skip: True  # [win or py<310 or ppc64le or aarch64]
  skip: True  # [cuda_compiler_version != "None"]
  skip: True  # [py == 313 and osx and x86_64]
  script_env:
    - unit_tests={{ unit_tests }}
  string: cuda_{{ cuda_compiler_version }}_{{ mpi }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}

requirements:
  build:
    - bc
    - bison
    - cmake
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - flex
    - libgomp      # [linux and not aarch64]
    - llvm-openmp  # [osx]
    - make
    - matplotlib-base                        # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - openssl
    - patch
    - perl
    - python                                 # [build_platform != target_platform]
    - scipy                                  # [build_platform != target_platform]
    - tcsh
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - coreutils  # [cuda_compiler_version != "None"]
    - {{ mpi }}  # [build_platform != target_platform and mpi == "openmpi"]
  host:
    - python
    - setuptools
    - numpy
    - scipy
    - matplotlib-base
    - bzip2
    - zlib
    - libboost-devel
    - libnetcdf
    - netcdf-fortran
    - pthread-stubs
    - fftw
    - arpack
    - libblas
    - liblapack
    - xorg-libxt  # [unix]
    - xorg-libxext   # [unix]
    - xorg-libx11   # [unix]
    - readline
    - llvm-openmp  # [osx]
    - libgomp      # [linux and not aarch64]
    - parmed =4
    - openssl
    - {{ mpi }}  # [mpi != 'nompi']
    - mpi4py  # [mpi != 'nompi']
    {% if cuda_major >= 12 %}
    - cuda-version {{ cuda_compiler_version }}
    # for libcudadevrt.a
    - cuda-cudart-static
    # for cicc; split off starting from CUDA 12.2
    # - cuda-nvvm-tools
    - cuda-nvtx-dev
    - libcublas-dev
    - libcufft-dev
    - libcurand-dev
    - libcusolver-dev
    - libcusparse-dev
    {% endif %}
  run:
    - python
    - setuptools
    - perl
    - numpy
    - scipy
    - matplotlib-base
    - joblib
    - libnetcdf
    - netcdf-fortran
    - fftw
    - libblas
    - liblapack
    - xorg-libxt  # [unix]
    - xorg-libxext  # [unix]
    - xorg-libx11   # [unix]
    - readline
    - llvm-openmp  # [osx]
    - libgomp      # [linux and not aarch64]
    - parmed >=4.0.0,<5.0.0a0
    - {{ mpi }}  # [mpi != 'nompi']
    - mpi4py  # [mpi != 'nompi']
    # See if this fixes the missing mkl error in a few builds
    - mkl  # [linux]
    - __cuda  # [not osx and cuda_compiler_version != "None"]
  run_constrained:
    - ambermini ==9999999999
    - packmol ==9999999999

test:
  requires:
{% if unit_tests == "run" %}
    - {{ compiler('c') }}
    - {{ compiler('fortran') }}
    - {{ compiler('cxx') }}
    - util-linux  # [linux64]
    - make
{% endif %}
    - tcsh
    # Try to force a library incompatibility error in osx (see #22)
    - lxml  # [osx]
    - rdkit  # [osx]
  source_files:
{% if unit_tests == "run" %}
    - "*"
{% else %}
    # we need to copy at least one file, otherwise we can't use SRC_DIR in run_test.sh
    - README
{% endif %}
  # commands: check run_test.sh for CLI tests
  imports:
    - parmed
    - pdb4amber
    - pymsmt
    - pytraj
    - sander
    # Try to force a library incompatibility error in osx (see #22)
    - rdkit  # [osx]
    - rdkit.Chem.AllChem  # [osx]

about:
  home: http://ambermd.org/AmberTools.php
  license: GPL-3.0-or-later AND LGPL-3.0-or-later AND BSD-3-Clause AND MIT
  license_file:
    - AmberTools/LICENSE
    - AmberTools/src/packmol_memgen/packmol_memgen/lib/packmol/LICENSE
  summary: 'AmberTools is a set of programs for biomolecular simulation and analysis'
  description: |
    AmberTools is a set of programs for biomolecular simulation and analysis.
    They are designed to work well with each other, and with the "regular" Amber
    suite of programs. You can perform many simulation tasks with AmberTools,
    and you can do more extensive simulations with the combination of AmberTools
    and Amber itself.

extra:
  recipe-maintainers:
    - simonbray
    - jaimergp
    - dacase
    - mikemhenry
    - mattwthompson
    - j-wags
    - swails
